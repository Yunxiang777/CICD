===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
Oracle實例概念明確，一個實例 => 操作Database
一個database，可以安裝多個實例 => 每個實例之間互不干擾(比如說: 在同一個db，建一個user叫:leon，另一個實例也可以叫:leon，兩個互不干擾~)
===========================================================================================================
cisco packet tracer
https://www.netacad.com/resources/lab-downloads?courseLang=en-US
===========================================================================================================
Docker 是 Linux 原生工具
Docker 的核心（Docker Engine）最早是為 Linux 開發的，它依賴 Linux kernel 的一些功能，例如 cgroups 與 namespaces。
→ Windows 本身沒有這些 Linux kernel 功能，所以不能直接原生執行 Docker Engine。

WSL2 提供 Linux 環境
Windows 10/11 的 WSL2 可以安裝一個輕量化的 Linux 核心，讓你在 Windows 上有一個「完整 Linux kernel」的環境。Docker Desktop for Windows 就是利用 WSL2 來運行 Docker Engine。
→ 也就是說，你在 Windows 上跑 Docker，其實是跑在 WSL2 Linux 裡面。
===========================================================================================================
什麼是 amd64 與 arm64？
amd64（x86_64）	原本是 AMD 發明的 64 位元 x86 架構，現在 Intel/AMD CPU 都支援。	桌機、筆電、伺服器。大部分 Windows / Linux / Docker image 都是這個架構。
arm64（aarch64）	ARM 64 位元架構，低功耗、高效能，設計給手機、平板、Raspberry Pi、Apple M1/M2。	手機、平板、樹莓派、Apple Silicon、部分雲端伺服器。
注意：名字雖然叫 amd64，但 Intel CPU 也用這個，不只 AMD。
===========================================================================================================
電腦
64 位元 = 新電腦的標配，可以跑 32/64 軟體，記憶體支援更大。
32 位元 = 舊電腦用的，只能跑 32 位軟體，受限於 4GB RAM。
🌐 同一網段 = 不需要經過路由器
如果兩台電腦在 同一個網段（網路位址相同），
👉 它們會透過 ARP (Address Resolution Protocol) 找到彼此的 MAC 位址，然後直接用 乙太網路幀 (Ethernet Frame) 傳送。
這種情況下，完全不需要經過路由器，交換機 (Switch) 就能處理。

🚦 不同網段 = 需要路由器
如果兩台電腦 不在同一個網段，
👉 它們就無法用 ARP 找到彼此的 MAC，因為「網路 ID 不同」。
這時候，電腦會把封包交給 預設閘道 (Default Gateway)，
➡️ 由路由器來判斷要怎麼轉送到目標網段。
===========================================================================================================
同一網段 = 網路位址相同。
網路位址 = IP 位址 AND 子網路遮罩。
子網路遮罩就是用來決定「哪部分是網路位址，哪部分是主機位址」。
===========================================================================================================
RPM = Linux 套件管理系統，類似安裝程式格式。
專門給 Red Hat 系列 Linux 用。
rpm 安裝 GitLab，其實就是透過這種格式把 GitLab 安裝進系統。
===========================================================================================================
Personal Access Token (PAT) 是一種 身份驗證憑證，由 GitHub 發給使用者，用來取代帳號密碼，讓使用者能透過命令列工具（例如 Git、cURL）或 API 安全地存取 GitHub。
===========================================================================================================
分支命名原則:
feature/分支命名 => 功能分支
hotfix/分支命名 => 修改bug
test/分支命名 => 測試
master => 生產
===========================================================================================================
合併提交 => git rebase -i HEAD~3
===========================================================================================================
.gitignore => 可以忽略文件，如果不確定目前專案或框架應該忽略甚麼，可以找關鍵字，比如說 react git .gitignore
===========================================================================================================
git reflog => 可以找回，被刪除的歷史提交紀錄 => 然後一樣 git reset --hard 版本號 去找他
===========================================================================================================
我是打 gti status的時候，看到我的檔名是亂碼，我的檔名是中文?
情況：在 Git Bash 裡輸入 git status，中文檔名顯示成亂碼（例如 \347\255\206…）
原因：Git 預設會把 非 ASCII 檔名轉成 \xxx 格式，這是為了跨平台安全，但在 Windows + Git Bash 下就會看到亂碼。
=> git config core.quotepath false
===========================================================================================================
為什麼不同編碼「不報錯」？
ISO-8859-1 或 Big5 的解碼器會把每個 byte 都看作合法的字元（或符號）：
ISO-8859-1 對 0xE4 → ä
ISO-8859-1 對 0xBD → ½
ISO-8859-1 對 0xA0 → 空格

因此即使編碼不對，程式還是能對應到「某個符號」。
結果就是「亂碼」：每個 byte 都被當作不同編碼的字，但整體就不是原本的文字了。
所以：亂碼其實是「解碼器把合法 byte 當作它自己編碼規則下的字」產生的。
===========================================================================================================
🔹 查看目前專案的 Git 使用者設定
git config user.name
git config user.email
👉 只會顯示目前 這個 repo (專案) 的設定。

🔹 查看全域 (global) 設定
git config --global user.name
git config --global user.email
===========================================================================================================
集中式 VCS
就像「公司內的檔案伺服器」：大家都要連上伺服器才能存取檔案，伺服器掛了大家就停工。

分散式 VCS
就像「每個人都有完整檔案備份」：就算伺服器壞了，任何人的副本都能當成新的中央伺服器。
===========================================================================================================
一、使用 Git 的版本控制
這些屬於「分散式版本控制系統 (DVCS)」或基於 Git 打造的服務：
Git（核心，開源工具，大家都用它當底層）
基於 Git 的雲端／平台
GitHub（偏開源社群、作品展示）
GitLab（偏企業、自架、完整 DevOps）
Azure Repos（Microsoft Azure DevOps 內建）
Gitea（輕量級自架 Git 服務）
👉 這些都「吃 Git」當底層，所以操作方式相通，例如：git clone、git commit、git push 都能用。

🔹 二、不使用 Git 的版本控制
這些屬於「集中式版本控制系統 (CVCS)」或其他架構：
集中式 VCS
SVN (Subversion)：老牌，很多老公司或政府專案還在用。
CVS (Concurrent Versions System)：更老，幾乎淘汰。
Perforce (Helix Core)：常見於遊戲大公司（Unity、Unreal 開發團隊），因為支援大檔案佳。

雲端文件管理類
Google Docs、Microsoft SharePoint：不是傳統程式碼版控，但算一種「文件版本控管」。
===========================================================================================================
為什麼會有不同公司？
Git 是開源的，任何人或公司都能拿來做自己的產品。
GitHub（2008）和 GitLab（2011）雖然都基於 Git，但他們的理念、定位不同：
GitHub：重視 開源社群，後來被 Microsoft 收購。
GitLab：重視 企業內部開發 和 完整 DevOps 解決方案，並且有 自架版本。
就像「同樣用 Linux」，但有 Ubuntu、RedHat、Debian 等不同公司或團隊維護的發行版。
===========================================================================================================
GitHub 與 GitLab 是什麼？
它們是 基於 Git 打造的服務平台，提供更多功能：
網頁介面（方便瀏覽程式碼、不用只看終端機）。
Issue、PR/MR（程式碼審核、協作）。
CI/CD、專案管理、權限控管。
換個比喻：
Git = 「汽車引擎」
GitHub / GitLab = 「不同品牌的汽車公司」，都用同樣的引擎（Git），但加了不同設計與功能。
===========================================================================================================
. Git 是什麼？
Git 不是公司，而是一個 分散式版本控制系統 (DVCS)。
由 Linus Torvalds（Linux 之父） 在 2005 年開發，開源、免費，任何人都能用。
功能：追蹤程式碼版本、多人協作、分支管理。
就像「原料」或「引擎」。